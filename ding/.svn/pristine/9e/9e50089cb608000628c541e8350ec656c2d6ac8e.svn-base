package com.ddcar.service.impl;

import com.common.DoubleOperation;
import com.common.OrderSequence;
import com.ddcar.entity.*;
import com.ddcar.mapper.*;
import com.ddcar.service.OrderPayService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

@Service
public class OrderPayServiceImpl implements OrderPayService {

    @Autowired
    private TbOrderMapper orderMapper;
    @Autowired
    private TbVehicleMapper vehicleMapper;
    @Autowired
    private TbOrderItemMapper orderItemMapper;
    @Autowired
    private TbBranchMapper branchMapper;
    @Resource
    private TbUserMapper tbUserMapper;

    @Override
    @Transactional
    public int generateOrders(String[] ids, long userId, Integer yue,
                              String payType, long branchId) throws Exception {
        TbOrder order = new TbOrder();
        String orderNo = orderMapper.getOrderNo();
        String orderId = OrderSequence.getOrderId(orderNo);

//      插入订单明细
        TbOrderItem orderItem = new TbOrderItem();
        List<Vehicles> findprice = vehicleMapper.findprice(ids);
        double deposit = 0;
        double rent = 0;
        Date date = new Date();
        String format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date);
        for (Vehicles vc : findprice) {
            orderItem.setCashDeposit(vc.getCashDeposit());
            orderItem.setRentMoney(vc.getMonthlyRent());
            orderItem.setUserId(userId);
            orderItem.setOrderId(orderId);
            orderItem.setVehicleId(vc.getVehicleId());
            orderItem.setType(vc.getType());
            orderItem.setModel(vc.getModel());
            orderItem.setSerialNumber(vc.getSerialNumber());
            orderItem.setCreateTime(format);
            deposit = DoubleOperation.sum(deposit, vc.getCashDeposit());
            rent = DoubleOperation.sum(rent, vc.getMonthlyRent());
            orderItemMapper.insertOrder(orderItem);
        }
//      分公司折扣
        double discount = 0;
        TbBranch branch = branchMapper.findDiscount(branchId);
        if (yue < 12) {
            discount = DoubleOperation.div(branch.getMonthdiscount(), 10, 2);
        } else if (yue >= 12 && yue < 24) {
            discount = DoubleOperation.div(branch.getDiscount(), 10, 2);
        } else {
            discount = DoubleOperation.div(branch.getTwodiscount(), 10, 2);
        }

//      租凭结束时间
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(date);
        calendar.add(Calendar.MONTH, yue);
        Date time = calendar.getTime();
        String stopFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(time);

        System.out.println(orderId);
//      插入订单表
        order.setOrderNo(orderId);
        order.setCreateTime(format);
        order.setUserId(userId);
        order.setCashDeposit(deposit);
        order.setRentMoney(rent);
        order.setDiscount(DoubleOperation.mul(discount, 10));
        order.setStartRentalTime(format);
        order.setStopRentalTime(stopFormat);
        order.setRentalTime(yue);
        order.setPayState("0");
        order.setOrderType(payType);
        //      用户信息 用户是否属于团签，个人用户支付押金，团签用户免押金
        UserVehicle user = tbUserMapper.findUser(userId);

        if (0 == user.getParentId()){
            order.setTotalMoney(DoubleOperation.sum(deposit,
                    DoubleOperation.mul(yue, DoubleOperation.mul(rent, discount))));
        } else {
            order.setTotalMoney(
                    DoubleOperation.mul(yue, DoubleOperation.mul(rent, discount)));
        }
        order.setUserSuperiorId(user.getParentId());
        orderMapper.insertOrder(order);
        return 0;
    }

    @Override
    public Double userRefund(Long userId, double makeUpAmount) throws Exception {
        List<TbOrder> order = orderMapper.getOrder(userId);
        double cashDeposit = 0;
        //用户订单的所有押金金额
        for(TbOrder tbOrder : order){
            cashDeposit += tbOrder.getCashDeposit();
        }
        Double sub = DoubleOperation.sub(cashDeposit, makeUpAmount);
        return sub;
    }
}
