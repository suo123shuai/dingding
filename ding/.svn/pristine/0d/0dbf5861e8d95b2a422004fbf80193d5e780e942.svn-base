package com.ddcar.service.impl;

import com.ddcar.entity.TbBranch;
import com.ddcar.mapper.TbBranchMapper;
import com.ddcar.service.TbBranchService;
import com.github.pagehelper.PageHelper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

/**
 * Created by Administrator on 2018-09-03.
 */
@Service
public class TbBranchServiceImpl implements TbBranchService{

    @Autowired(required = false)
    TbBranchMapper tbBranchMapper;

    @Override
    public List<TbBranch> findTbBranchMapperList(Integer page, Integer size) {
        PageHelper.startPage(page,size);
        return tbBranchMapper.findTbBranchList(page,size);
    }

    @Override
    public List<TbBranch> findTbBranchbranchList(Integer page, Integer size,Integer branchId,String branchName,Integer websiteType) {
        PageHelper.startPage(page,size);
        return tbBranchMapper.findTbBranchbranchList(branchId,branchName,websiteType);
    }

    @Override
    public List<TbBranch> selectcomWang(Long parentId,Integer page, Integer size,Integer websiteType,Long branchId,String branchName) {
        PageHelper.startPage(page,size);
        return tbBranchMapper.selectcomWang(parentId,websiteType,branchId,branchName);
    }

    @Override
    public void add(TbBranch tbBranch) {
        tbBranchMapper.insertSelective(tbBranch);
    }

    @Override
    public void insertDot(TbBranch tbBranch) {
        tbBranchMapper.insertDot(tbBranch);
    }

    @Override
    public void update(TbBranch tbBranch) {
        tbBranchMapper.updateTbBranch(tbBranch);
    }

    @Override
    public void updateDot(TbBranch tbBranch) {
        tbBranchMapper.updateDot(tbBranch);
    }

    @Override
    public void delTbBranch(Long[] branchId) {
        for (Long id:branchId){
            tbBranchMapper.delTbBranch(id);
        }
    }

    @Override
    public void enable(Long[] branchId) {
        for (Long id:branchId){
            tbBranchMapper.enable(id);
        }
    }

    @Override
    public void close(Long[] branchId) {
        for (Long id:branchId){
            tbBranchMapper.close(id);
        }
    }

    @Override
    public TbBranch branchSearchId(Long branchId) {
        return tbBranchMapper.branchSearchId(branchId);
    }

    @Override
    public void del(Integer id) {

    }
}
